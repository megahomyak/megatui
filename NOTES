=== IMPLEMENTATION DETAILS ===

FOR MAKING THIS IN C: Turns out I *have* to use ncurses. Crap. I thought the standard library - maybe with some POSIX extensions - will solve the problem, but frick me, I guess, have to bring in a dependency (eugh!)

Every character has a type: it's either static, editable, important static or a button. Button cells should also store an arbitrary index in themselves, this is to recognize what button got pressed

=== UI ===

At least one cell per screen so there will be at least something to stand on. Cursor stands on cells, like in Vim, not between cells, like in Windows 7 built-in Notepad. Cursor can't go beyond cells

Empty editable fields should be implemented via one space character cell marked as "editable" - this is to make editable fields visible when they're empty and allow to enter text after the last character. Theoretically, one can use anything else instead of a space, but it will look confusing then

Apart from that one space at the end of an editable field, there should be no mandatory padding anywhere, e.g. a button can be in such a way that its entire text is its only clickable surface, no one-space paddings around the button text, these paddings can be added by the user if the user desires so

Actions:
* Arrow keys:
    * Move the cursor one screen cell in the specified direction
* Enter/return:
    * When cursor is on button cell:
        * Activate the button
    * When cursor is on editable cell:
        * Insert a "new line" ("\n") editable cell before the current cell
* Any other character:
    * When cursor is on editable cell:
        * Insert that "any other character" as editable cell, before the current cell

Possible colors?:
Plain text - white on black
Buttons - white on blue
Edit areas - black on yellow
Important stuff - red on black
# I think that bg=black should be for non-interactable stuff and bg=other should be for interactive stuff

=== API ===

== Somewhat complicated, with colors ==

StringChar = StringChar*? next, char content, ForegroundColor fg_color, CharType type, StringChar*? prev; // ForegroundColor I don't want to define, but it should include "default"
CharType = Plain() | Sendable(int id) | Editable();
int sent_id = query(StringChar mut* current_char); // Any edits are supposed to happen within the provided string; the user must ensure that it's not an editable that's sent, otherwise it can be deleted if it's not the last editable and will thus invalidate the pointer, breaking everything to shit. Can be prevented by creating separate types, but fuck it, who cares

== Without colors, types are a number ==

StringChar = StringChar*? next, char content, CharType type, int id, StringChar*? prev;
CharType = Plain = 0 | Important = 1 | Sendable = 2 | Editable = 3;
int sent_id = query(StringChar mut* current_char);

=== SEPARATION OF CONCERNS ===

From the entire StringChar, for mapping out character rendering positions, `CharType type` and `int id` are not needed, and out of `char content` it's only important if the character is a newline or not. Other than that, for mapping the other two parameters are the screen width and height
